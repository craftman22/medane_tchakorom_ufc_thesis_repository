#!/bin/bash

# synchronous-multisplitting-direct-residual-computation
# synchronous-multisplitting-synchronous-minimization-direct-residual
# synchronous-multisplitting-synchronous-minimization-approximate-residual
# synchronous-multisplitting-approximate-residual

# Set MPI_BINDING env variable depending on the target platform
# Detect the platform
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    export MPI_BINDING="--map-by core"
    #echo "hello"
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Linux
    export MPI_BINDING="--bind-to core --map-by core"
else
    echo "Unsupported platform: $OSTYPE"
    exit 1
fi

# Print the value for verification
echo "MPI_BINDING is set to $MPI_BINDING"

# Get default values for all options
source "./config/default_run_variables"

# Set file path for each algorithm binary

SM_BINARY="./bin/synchronous-multisplitting"
SM_PROGRAM_NAME="Synchronous Multisplitting"


AM_BINARY="./bin/asynchronous-multisplitting"
AM_PROGRAM_NAME="Asynchronous Multisplitting"


SMSM_GLOBAL_BINARY="./bin/synchronous-multisplitting-synchronous-minimization-global"
SMSM_GLOBAL_PROGRAM_NAME="Synchronous Multisplitting & Synchronous Minimization (GLOBAL MINIMIZATION)"


SMSM_SEMI_LOCAL_BINARY="./bin/synchronous-multisplitting-synchronous-minimization-semi-local"
SMSM_SEMI_LOCAL_PROGRAM_NAME="Synchronous Multisplitting & Synchronous Minimization  (SEMI LOCAL MINIMIZATION)"


SMSM_LOCAL_BINARY="./bin/synchronous-multisplitting-synchronous-minimization-local"
SMSM_LOCAL_PROGRAM_NAME="Synchronous Multisplitting & Synchronous Minimization  (LOCAL MINIMIZATION)"


AMAM_GLOBAL_BINARY="./bin/asynchronous-multisplitting-asynchronous-minimization-global"
AMAM_GLOCAL_PROGRAM_NAME="Aynchronous Multisplitting & Asynchronous Minimization (GLOBAL MINIMIZATION)"

AMAM_LOCAL_BINARY="./bin/asynchronous-multisplitting-asynchronous-minimization-local"
AMAM_LOCAL_PROGRAM_NAME="Aynchronous Multisplitting & Asynchronous Minimization (LOCAL MINIMIZATION)"

AMAM_SEMI_LOCAL_BINARY="./bin/asynchronous-multisplitting-asynchronous-minimization-local"
AMAM_SEMI_LOCAL_PROGRAM_NAME="Aynchronous Multisplitting & Asynchronous Minimization (LOCAL MINIMIZATION)"

# Set file path for petscmpiexec runner
PETSC_MPI_EXEC="$PETSC_DIR/lib/petsc/bin/petscmpiexec"

# set default values for each entry options
#verbose_flag=${DEFAULT_VERBOSE_MODE}
filename_flag=${DEFAULT_FILENAME}
np_flag=${DEFAULT_NP}
npb_flag=${DEFAULT_NPB}
m_flag=${DEFAULT_M}
n_flag=${DEFAULT_N}
s_flag=${DEFAULT_S}
min_convergence_count_flag=${DEFAULT_MIN_CONVERGENCE_COUNT}
relative_tolerance_flag=${DEFAULT_RELATIVE_TOLERANCE}
algorithm_flag=${DEFAULT_ALGORITHM}
#timer_flag=${DEFAULT_TIMER_OPTION}

inner_ksp_flag=${DEFAULT_INNER_SOLVER}
inner_rtol_flag=${DEFAULT_INNER_RELATIVE_TOLERANCE}
inner_max_iter_flag=${DEFAULT_INNER_MAX_ITERATIONS}
inner_pc_type_flag=${DEFAULT_INNER_PRECONDITIONNER_TYPE}

outer_ksp_flag=${DEFAULT_OUTER_SOLVER}
outer_rtol_flag=${DEFAULT_OUTER_RELATIVE_TOLERANCE}
outer_max_iter_flag=${DEFAULT_OUTER_MAX_ITERATIONS}
outer_pc_type_flag=${DEFAULT_OUTER_PRECONDITIONNER_TYPE}

other_petsc_options_flag=${DEFAULT_OTHER_PETSC_OPTIONS}

# 15 options

#other_mpi_options_flag=${DEFAULT_OTHER_MPI_OPTIONS}

#timer_flag=${DEFAULT_TIMER_OPTION}

# Function to display the script usage
show_help() {
    echo "Usage: $0 [options]"
    echo "Options:"
    echo "  --np                         number of processes"
    echo "  --m                          mesh number of lines"
    echo "  --n                          mesh number of columns"
    echo "  --npb                        number of processes per block"
    echo "  --s                          number of inner iterations before minimization"
    echo "  --min_convergence_count_flag  number of times convergence should occurs before end of asynchronous code"
    echo "  --rtol                       relative tolerance for convergence test"
    echo "  --alg                        algorithm to use"
    echo "  --inner-ksp                  inner solver to use"
    echo "  --inner-rtol                 relative tolerance for inner solver"
    echo "  --inner-max-iters            max iterations for inner solver"
    echo "  --inner-pc-type              preconditionner type for inner solver"
    echo "  --outer-ksp                  outer solver to use"
    echo "  --outer-rtol                 relative tolerance for outer solver"
    echo "  --outer-max-iters            max iterations for outer solver"
    echo "  --outer-pc-type              preconditionner type for outer solver"
    echo "  --other-petsc-options        other PETSc options"
    exit 1
}

# Parse options using getopts
while [[ "$#" -gt 0 ]]; do
    case "$1" in
    --np)
        np_flag="$2"
        shift 2
        ;;
    --m)
        m_flag="$2"
        shift 2
        ;;
    --n)
        n_flag="$2"
        shift 2
        ;;
    --npb)
        npb_flag="$2"
        shift 2
        ;;
    --convergence_count_min)
        min_convergence_count_flag="$2"
        shift 2
        ;;
    --s)
        s_flag="$2"
        shift 2
        ;;
    --rtol)
        relative_tolerance_flag="$2"
        shift 2
        ;;
    --alg)
        algorithm_flag="$2"
        shift 2
        ;;
    --inner-ksp)
        inner_ksp_flag="$2"
        shift 2
        ;;
    --inner-rtol)
        inner_rtol_flag="$2"
        shift 2
        ;;
    --inner-max-iters)
        inner_max_iter_flag="$2"
        shift 2
        ;;
    --inner-pc-type)
        inner_pc_type_flag="$2"
        shift 2
        ;;
    --outer-ksp)
        outer_ksp_flag="$2"
        shift 2
        ;;
    --outer-rtol)
        outer_rtol_flag="$2"
        shift 2
        ;;
    --outer-max-iters)
        outer_max_iter_flag="$2"
        shift 2
        ;;
    --outer-pc-type)
        outer_pc_type_flag="$2"
        shift 2
        ;;
    --other-petsc-options)
        other_petsc_options_flag="$2"
        shift 2
        ;;
    --help) show_help ;; # Show usage if --help is provided
    *)
        echo "Unknown option: $1"
        show_help
        ;; # Catch unknown options
    esac
done

#shift $((OPTIND - 1))

# print help function in case parameters are empty
if [ -z "$np_flag" ] || [ -z "$m_flag" ] || [ -z "$n_flag" ] || [ -z "$npb_flag" ] ||
    [ -z "$min_convergence_count_flag" ] || [ -z "$s_flag" ] || [ -z "$relative_tolerance_flag" ] || [ -z "$algorithm_flag" ] ||
    [ -z "$inner_ksp_flag" ] || [ -z "$inner_rtol_flag" ] || [ -z "$inner_max_iter_flag" ] || [ -z "$inner_pc_type_flag" ] ||
    [ -z "$outer_ksp_flag" ] || [ -z "$outer_rtol_flag" ] || [ -z "$outer_max_iter_flag" ] || [ -z "$outer_pc_type_flag" ]; then
    echo "Error: Missing required values for one of the options." >&2
    show_help
    exit 1
fi

program_name=
binary=


if [ "$algorithm_flag" = "SM" ]; then
    binary=$SM_BINARY
    program_name=${SM_PROGRAM_NAME}
fi


if [ "$algorithm_flag" = "SMSM_GLOBAL" ]; then
    binary=${SMSM_GLOBAL_BINARY}
    program_name=${SMSM_GLOBAL_PROGRAM_NAME}
fi

if [ "$algorithm_flag" = "SMSM_LOCAL" ]; then
    binary=${SMSM_LOCAL_BINARY}
    program_name=${SMSM_LOCAL_PROGRAM_NAME}
fi

if [ "$algorithm_flag" = "SMSM_SEMI_LOCAL" ]; then
    binary=${SMSM_SEMI_LOCAL_BINARY}
    program_name=${SMSM_SEMI_LOCAL_PROGRAM_NAME}
fi

if [ "$algorithm_flag" = "AM" ]; then
    binary=$AM_BINARY
    program_name=${AM_PROGRAM_NAME}
fi

if [ "$algorithm_flag" = "AMAM_LOCAL" ]; then
    binary=${AMAM_LOCAL_BINARY}
    program_name=${AMAM_LOCAL_PROGRAM_NAME}
fi

if [ "$algorithm_flag" = "AMAM_SEMI_LOCAL" ]; then
    binary=${AMAM_SEMI_LOCAL_BINARY}
    program_name=${AMAM_SEMI_LOCAL_PROGRAM_NAME}
fi

if [ "$algorithm_flag" = "AMAM_GLOBAL" ]; then
    binary=${AMAM_GLOBAL_BINARY}
    program_name=${AMAM_GLOBAL_PROGRAM_NAME}
fi

echo -e "Solving 2D Poisson Equation with options \n\
\t Program : $program_name \n\
\t Mesh size : $m_flag x $n_flag \n\
\t Number of processes : $np_flag \n\
\t Number of processes per block : $npb_flag \n\
\t Relative tolerance for convergence : $relative_tolerance_flag \n\n"

echo -e "\
\t INNER solver : $inner_ksp_flag \n\
\t INNER solver relative tolerance : $inner_rtol_flag \n\
\t INNER solver max iterations : $inner_max_iter_flag \n\
\t INNER solver preconditionner : $inner_pc_type_flag \n"

if [ "$algorithm_flag" = "SMSM_GLOBAL" ]; then
    echo -e "\
    \t OUTER solver : $outer_ksp_flag \n\
    \t OUTER solver relative tolerance : $outer_rtol_flag \n\
    \t OUTER solver max iterations : $outer_max_iter_flag \n\
    \t OUTER solver preconditionner : $outer_pc_type_flag \n"
fi


if [ "$algorithm_flag" = "SMSM_LOCAL" ]; then
    echo -e "\
    \t OUTER solver : $outer_ksp_flag \n\
    \t OUTER solver relative tolerance : $outer_rtol_flag \n\
    \t OUTER solver max iterations : $outer_max_iter_flag \n\
    \t OUTER solver preconditionner : $outer_pc_type_flag \n"
fi

if [ "$algorithm_flag" = "SMSM_SEMI_LOCAL" ]; then
    echo -e "\
    \t OUTER solver : $outer_ksp_flag \n\
    \t OUTER solver relative tolerance : $outer_rtol_flag \n\
    \t OUTER solver max iterations : $outer_max_iter_flag \n\
    \t OUTER solver preconditionner : $outer_pc_type_flag \n"
fi


if [ "$algorithm_flag" = "AM" ]; then
    echo -e "\
    \t Minimum convergence count  : $min_convergence_count_flag \n"
fi


if [ "$algorithm_flag" = "AMAM_LOCAL" ]; then
    echo -e "\
    \t OUTER solver : $outer_ksp_flag \n\
    \t OUTER solver relative tolerance : $outer_rtol_flag \n\
    \t OUTER solver max iterations : $outer_max_iter_flag \n\
    \t OUTER solver preconditionner : $outer_pc_type_flag \n\n\
    \t Minimum convergence count  : $min_convergence_count_flag \n"
fi


if [ "$algorithm_flag" = "AMAM_SEMI_LOCAL" ]; then
    echo -e "\
    \t OUTER solver : $outer_ksp_flag \n\
    \t OUTER solver relative tolerance : $outer_rtol_flag \n\
    \t OUTER solver max iterations : $outer_max_iter_flag \n\
    \t OUTER solver preconditionner : $outer_pc_type_flag \n\n\
    \t Minimum convergence count  : $min_convergence_count_flag \n"
fi

if [ "$algorithm_flag" = "AMAM_GLOBAL" ]; then
    echo -e "\
    \t OUTER solver : $outer_ksp_flag \n\
    \t OUTER solver relative tolerance : $outer_rtol_flag \n\
    \t OUTER solver max iterations : $outer_max_iter_flag \n\
    \t OUTER solver preconditionner : $outer_pc_type_flag \n\n\
    \t Minimum convergence count  : $min_convergence_count_flag \n"
fi


echo -e "\
\t Other petsc options : ${other_petsc_options_flag} \n"



result_n=$(( np_flag / npb_flag ))
result_n_minus_1=$(((np_flag - 1) / npb_flag))
if [[ $result_n -ne 2 && $result_n_minus_1 -ne 2 ]]; then
    echo -e "Total number of processes and number of processes per block are not matching"
    echo -e "...Exit\n"
    exit 0
fi




if [ -x "$(command -v $binary)" ]; then



    if [ "$algorithm_flag" = "SM" ]; then

        command="${PETSC_MPI_EXEC} -n ${np_flag} ${binary}  -npb ${npb_flag} -m ${m_flag} -n ${n_flag}    -rtol ${relative_tolerance_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_type ${inner_ksp_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_rtol ${inner_rtol_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_max_it ${inner_max_iter_flag} -${DEFAULT_INNER_KSP_PREFIX}pc_type ${inner_pc_type_flag} ${other_petsc_options_flag}"
        echo -e "RUNNING COMMAND: ${command} \n"
        eval "${command}"

    fi


    if [ "$algorithm_flag" = "AM" ]; then

        command="${PETSC_MPI_EXEC} -n ${np_flag} ${binary}  -npb ${npb_flag} -m ${m_flag} -n ${n_flag}  -min_convergence_count ${min_convergence_count_flag} -rtol ${relative_tolerance_flag}  -${DEFAULT_INNER_KSP_PREFIX}ksp_type ${inner_ksp_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_rtol ${inner_rtol_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_max_it ${inner_max_iter_flag} -${DEFAULT_INNER_KSP_PREFIX}pc_type ${inner_pc_type_flag} ${other_petsc_options_flag}"
        echo -e "RUNNING COMMAND: ${command} \n"
        eval "${command}"

    fi


    if [ "$algorithm_flag" = "SMSM_GLOBAL" ]; then
        command="${PETSC_MPI_EXEC} -n ${np_flag} ${binary} -npb ${npb_flag}  -m ${m_flag} -n ${n_flag}   -s ${s_flag}  -rtol ${relative_tolerance_flag}  -${DEFAULT_INNER_KSP_PREFIX}ksp_type ${inner_ksp_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_rtol ${inner_rtol_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_max_it ${inner_max_iter_flag} -${DEFAULT_INNER_KSP_PREFIX}pc_type ${inner_pc_type_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_type ${outer_ksp_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_rtol ${outer_rtol_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_max_it ${outer_max_iter_flag} -${DEFAULT_OUTER_KSP_PREFIX}pc_type ${outer_pc_type_flag} ${other_petsc_options_flag}"
        echo -e "RUNNING COMMAND: ${command} \n"
        eval "${command}"
    fi


    if [ "$algorithm_flag" = "SMSM_LOCAL" ]; then
        command="${PETSC_MPI_EXEC} -n ${np_flag} ${binary} -npb ${npb_flag}  -m ${m_flag} -n ${n_flag}   -s ${s_flag}   -rtol ${relative_tolerance_flag}  -${DEFAULT_INNER_KSP_PREFIX}ksp_type ${inner_ksp_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_rtol ${inner_rtol_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_max_it ${inner_max_iter_flag} -${DEFAULT_INNER_KSP_PREFIX}pc_type ${inner_pc_type_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_type ${outer_ksp_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_rtol ${outer_rtol_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_max_it ${outer_max_iter_flag} -${DEFAULT_OUTER_KSP_PREFIX}pc_type ${outer_pc_type_flag} ${other_petsc_options_flag}"
        echo -e "RUNNING COMMAND: ${command} \n"
        eval "${command}"
    fi

    if [ "$algorithm_flag" = "SMSM_SEMI_LOCAL" ]; then
        command="${PETSC_MPI_EXEC} -n ${np_flag} ${binary} -npb ${npb_flag}  -m ${m_flag} -n ${n_flag}   -s ${s_flag}   -rtol ${relative_tolerance_flag}  -${DEFAULT_INNER_KSP_PREFIX}ksp_type ${inner_ksp_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_rtol ${inner_rtol_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_max_it ${inner_max_iter_flag} -${DEFAULT_INNER_KSP_PREFIX}pc_type ${inner_pc_type_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_type ${outer_ksp_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_rtol ${outer_rtol_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_max_it ${outer_max_iter_flag} -${DEFAULT_OUTER_KSP_PREFIX}pc_type ${outer_pc_type_flag} ${other_petsc_options_flag}"
        echo -e "RUNNING COMMAND: ${command} \n"
        eval "${command}"
    fi


    if [ "$algorithm_flag" = "AMAM_GLOBAL" ]; then
        command="${PETSC_MPI_EXEC} -n ${np_flag} ${binary}  -npb ${npb_flag} -m ${m_flag} -n ${n_flag}  -s ${s_flag} -min_convergence_count ${min_convergence_count_flag} -rtol ${relative_tolerance_flag}  -${DEFAULT_INNER_KSP_PREFIX}ksp_type ${inner_ksp_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_rtol ${inner_rtol_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_max_it ${inner_max_iter_flag} -${DEFAULT_INNER_KSP_PREFIX}pc_type ${inner_pc_type_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_type ${outer_ksp_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_rtol ${outer_rtol_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_max_it ${outer_max_iter_flag} -${DEFAULT_OUTER_KSP_PREFIX}pc_type ${outer_pc_type_flag} ${other_petsc_options_flag}"
        echo -e "RUNNING COMMAND: ${command} \n"
        eval "${command}"
    fi

    if [ "$algorithm_flag" = "AMAM_LOCAL" ]; then
        command="${PETSC_MPI_EXEC} -n ${np_flag} ${binary}  -npb ${npb_flag} -m ${m_flag} -n ${n_flag}  -s ${s_flag} -min_convergence_count ${min_convergence_count_flag} -rtol ${relative_tolerance_flag}  -${DEFAULT_INNER_KSP_PREFIX}ksp_type ${inner_ksp_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_rtol ${inner_rtol_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_max_it ${inner_max_iter_flag} -${DEFAULT_INNER_KSP_PREFIX}pc_type ${inner_pc_type_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_type ${outer_ksp_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_rtol ${outer_rtol_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_max_it ${outer_max_iter_flag} -${DEFAULT_OUTER_KSP_PREFIX}pc_type ${outer_pc_type_flag} ${other_petsc_options_flag}"
        echo -e "RUNNING COMMAND: ${command} \n"
        eval "${command}"
    fi

    if [ "$algorithm_flag" = "AMAM_SEMI_LOCAL" ]; then
        command="${PETSC_MPI_EXEC} -n ${np_flag} ${binary}  -npb ${npb_flag} -m ${m_flag} -n ${n_flag}  -s ${s_flag} -min_convergence_count ${min_convergence_count_flag} -rtol ${relative_tolerance_flag}  -${DEFAULT_INNER_KSP_PREFIX}ksp_type ${inner_ksp_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_rtol ${inner_rtol_flag} -${DEFAULT_INNER_KSP_PREFIX}ksp_max_it ${inner_max_iter_flag} -${DEFAULT_INNER_KSP_PREFIX}pc_type ${inner_pc_type_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_type ${outer_ksp_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_rtol ${outer_rtol_flag} -${DEFAULT_OUTER_KSP_PREFIX}ksp_max_it ${outer_max_iter_flag} -${DEFAULT_OUTER_KSP_PREFIX}pc_type ${outer_pc_type_flag} ${other_petsc_options_flag}"
        echo -e "RUNNING COMMAND: ${command} \n"
        eval "${command}"
    fi

else
    echo "Warning: $binary not found or not executable. (custom message)" >&2
fi
